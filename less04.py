# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых 
# больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

def my_generator(in_list):
    if not in_list:
        return None
    
    i = 1
    while i < len(in_list):
        if in_list[i - 1] < in_list[i]:
            yield in_list[i]
        i += 1
    
    
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = list(my_generator(my_list))

#ну или так:
new_list2 = [my_list[index] for index in range(1, len(my_list)) if my_list[index] > my_list[index - 1]]

print(f"Исходный список: {my_list}")
print(f"Новый список: {new_list}")
print(f"Новый список: {new_list2}")

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print([item for item in range(20, 241) if not (item % 20 and item % 21)])

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
# Сформировать итоговый массив чисел, соответствующих требованию. 
# Элементы вывести в порядке их следования в исходном списке. 
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

sourse_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result_list = [item for item in sourse_list if sourse_list.count(item) == 1]
print(result_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
# В список должны войти четные числа от 100 до 1000 (включая границы). 
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

import functools
my_list = [i for i in range(100, 1001, 2)]
result = functools.reduce(lambda x, y: x*y, my_list)

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. 
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
# Необходимо предусмотреть условие его завершения.

from itertools import count, cycle

def iterator1(begin_value, stop_value = 100):
    for i in range(begin_value, begin_value + stop_value):
        yield i

for item in iterator1(3): print(item)

iterable = [5,8,6,3,24,6,888]

def iterator2(iterable, cyrcles_count = 5):
    cyrcle_number = 0
    n = 0
    for item in cycle(iterable):
        if cyrcle_number >= cyrcles_count:
            break
        n += 1
        if n > len(iterable):
            n = 0
            cyrcle_number += 1
        yield item
        
for item in iterator2(iterable): print(item)

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
# При вызове функции должен создаваться объект-генератор. 
# Функция должна вызываться следующим образом: for el in fact(n). 
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, 
# начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    result = 1
    for i in range (1, n):
        result *= i
        yield result
    return 0 

n = 10
for el in fact(n): print(el)